digraph VIPER_visualization_root {
    node [fontname = "Fira Mono"];

    root [label = "grandfather(X, Y)"];
    root_success [
        // enables having multiple boxes inside a node
        shape = record,
        // using < and > instead of quotes for delimiting a label makes it possible to use (a subset of) HTML in it
        // { A | B } makes A and B be in two separate boxes stacked on top of each other
        label = <{grandfather<sub>1</sub>(X<sub>1</sub>, Y<sub>1</sub>)|X<sub>1</sub> = X, Y<sub>1</sub> = X}>
    ];
    subgoal1 [label = <father(X, Z<sub>1</sub>)>];
    subgoal2 [label = <parent(homer, Y)>];
    subgoal1_success [
        shape = record,
        label = <{father<sub>1</sub>(abe, homer)|X = abe, Z<sub>1</sub> = homer}>
    ];
    subgoal2_success [
        shape = record,
        label = <{parent<sub>1</sub>(X<sub>2</sub>, Y<sub>2</sub>)|X<sub>2</sub> = homer, Y<sub>2</sub> = Y}>
    ];
    subgoal2_success_mother [
        color = red,
        label = <mother(homer, Y)<br />Nicht erfÃ¼llbar!>
    ];

    // this ensures that subgoal1 is always left of subgoal2
    // and that they are always on the same level
    // try commenting the rank = same line and see what happens
    {rank = same; subgoal1; subgoal2}
    subgoal1 -> subgoal2 [style = invis];

    root -> root_success;
    root_success -> subgoal1 [style = dashed];
    root_success -> subgoal2 [style = dashed];
    subgoal1 -> subgoal1_success;
    subgoal2 -> subgoal2_success;
    subgoal2_success -> subgoal2_success_mother [style = dashed];
    // constraint = false ignores any rank constraints added by this edge
    // without disabling it, graphviz might try to arrange this node halfway
    // between the two nodes connected to it
    subgoal2_success_mother -> subgoal2 [style = dotted, color = red, constraint = false];
}
