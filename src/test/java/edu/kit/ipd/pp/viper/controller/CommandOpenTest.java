package edu.kit.ipd.pp.viper.controller;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.io.IOException;

import org.junit.Test;

public class CommandOpenTest extends ControllerTest {
    /**
     * Tests the reading routine.
     */
    @Test
    public void readingTest() {
        CommandOpen c = this.gui.getCommandOpen();
        this.gui.getConsolePanel().clearAll();
        final String text = c.getFileText(new File(this.getClass().getResource("/inputTestFile.txt").getPath()));

        assertTrue(text.trim().equals("02340520350130523050235"));
    }

    /**
     * Tests whether the UI gets updated properly.
     */
    @Test
    public void uiUpdateTest() {
        File file = new File("");
        this.gui.getCommandOpen().updateUI(file);
        assertTrue(this.gui.getEditorPanel().hasFileReference());
        assertFalse(this.gui.getEditorPanel().hasChanged());
        file.delete();
    }
    
    /**
     * Tests the error output of the command.
     */
    @Test
    public void errorOutputTest() {
        final String testPath = "/test/test.pl";
        final IOException exception = new IOException("Test");

        this.gui.setDebugMode(false);
        this.gui.getConsolePanel().clearAll();
        this.gui.getCommandOpen().printOpenError(exception, testPath);
        assertFalse(this.gui.getConsolePanel().getOutputAreaText().isEmpty());

        this.gui.setDebugMode(true);
        this.gui.getConsolePanel().clearAll();
        this.gui.getCommandOpen().printOpenError(exception, testPath);
        assertFalse(this.gui.getConsolePanel().getOutputAreaText().isEmpty());        
    }
    
    /**
     * Tests opening a file directly with and without handling unsaved changes.
     */
    @Test
    public void directOpenTest() {
        File dest = new File("dest.pl");
        String path = this.getClass().getResource("/inputTestFile.txt").getPath();
        
        this.gui.getEditorPanel().setHasChanged(false);
        this.buildCommandOpenDirectly(path, this.gui.getCommandSave(), new DefaultOptionPane()).execute();
        assertTrue(this.gui.getEditorPanel().hasFileReference());
        assertTrue(this.gui.getEditorPanel().getSourceText().trim()
                .equals(SharedTestConstants.INPUT_TEST_FILE_CONTENT));

        this.gui.getEditorPanel().setSourceText(SharedTestConstants.INPUT_TEST_FILE_CONTENT);
        this.gui.getEditorPanel().setHasChanged(true);
        this.buildCommandOpenDirectly(path, this.buildCommandSave(dest), new YesOptionPane()).execute();
        assertTrue(dest.length() > 0);
        assertTrue(this.gui.getEditorPanel().hasFileReference());
        assertTrue(this.gui.getEditorPanel().getSourceText().trim()
                .equals(SharedTestConstants.INPUT_TEST_FILE_CONTENT));
        
        this.gui.getEditorPanel().setSourceText("test");
        this.gui.getEditorPanel().setFileReference(null);
        this.gui.getEditorPanel().setHasChanged(true);
        this.buildCommandOpenDirectly(path, this.buildCommandSave(dest), new CancelOptionPane()).execute();
        assertFalse(this.gui.getEditorPanel().hasFileReference());
        assertTrue(this.gui.getEditorPanel().getSourceText().trim().equals("test"));
        
        dest.delete();
    }
    
    /**
     * Tests opening a file via dialog without unsaved changes to the editor.
     */
    @Test
    public void dialogWithoutChangesTest() {
        File dest = new File("dest.pl");
        File f = new File(this.getClass().getResource("/inputTestFile.txt").getPath());
        
        this.gui.getEditorPanel().setHasChanged(false);
        this.buildCommandOpenDialog(this.gui.getCommandSave(), new DefaultOptionPane(),
                new PreselectionFileChooser(f)).execute();
        assertTrue(this.gui.getEditorPanel().hasFileReference());
        assertTrue(this.gui.getEditorPanel().getSourceText().trim().
                equals(SharedTestConstants.INPUT_TEST_FILE_CONTENT));
        
        this.gui.getEditorPanel().setHasChanged(false);
        this.gui.getEditorPanel().setFileReference(null);
        this.buildCommandOpenDialog(this.gui.getCommandSave(), new DefaultOptionPane(),
                new PreselectionFileChooser(null)).execute();
        assertFalse(this.gui.getEditorPanel().hasChanged());
        assertFalse(this.gui.getEditorPanel().hasFileReference());
        
        dest.delete();
    }
    
    /**
     * Tests opening a file via dialog and saving editor changes.
     */
    @Test
    public void dialogAndSaveTest() {
        File dest = new File("dest.pl");
        File f = new File(this.getClass().getResource("/inputTestFile.txt").getPath());
        
        this.gui.getEditorPanel().setSourceText(SharedTestConstants.INPUT_TEST_FILE_CONTENT);
        this.gui.getEditorPanel().setHasChanged(true);
        this.buildCommandOpenDialog(this.buildCommandSave(dest), new YesOptionPane(),
                new PreselectionFileChooser(f)).execute();
        assertTrue(dest.length() > 0);
        assertTrue(this.gui.getEditorPanel().hasFileReference());
        assertTrue(this.gui.getEditorPanel().getSourceText().trim()
                .equals(SharedTestConstants.INPUT_TEST_FILE_CONTENT));
        
        dest.delete();
    }
    
    /**
     * Tests opening a file via dialog and denying to save changes to the editor.
     */
    @Test
    public void dialogAndDoNotSaveTest() {
        File dest = new File("dest.pl");
        File f = new File(this.getClass().getResource("/inputTestFile.txt").getPath());
        
        this.gui.getEditorPanel().setSourceText(SharedTestConstants.INPUT_TEST_FILE_CONTENT);
        this.gui.getEditorPanel().setHasChanged(true);
        this.buildCommandOpenDialog(this.buildCommandSave(dest), new NoOptionPane(),
                new PreselectionFileChooser(f)).execute();
        assertTrue(this.gui.getEditorPanel().hasFileReference());
        assertTrue(this.gui.getEditorPanel().getSourceText().trim()
                .equals(SharedTestConstants.INPUT_TEST_FILE_CONTENT));
        
        dest.delete();
    }
    
    /**
     * Tests opening a file via dialog and canceling due to changes to the editor.
     */
    @Test
    public void dialogAndCancelSaveTest() {
        File dest = new File("dest.pl");
        File f = new File(this.getClass().getResource("/inputTestFile.txt").getPath());
        
        this.gui.getEditorPanel().setSourceText("test");
        this.gui.getEditorPanel().setFileReference(null);
        this.gui.getEditorPanel().setHasChanged(true);
        this.buildCommandOpenDialog(this.buildCommandSave(dest), new CancelOptionPane(),
                new PreselectionFileChooser(f)).execute();
        assertFalse(this.gui.getEditorPanel().hasFileReference());
        assertTrue(this.gui.getEditorPanel().getSourceText().trim().equals("test"));
        
        dest.delete();
    }
    
    private CommandSave buildCommandSave(File f) {
        return new CommandSave(this.gui.getConsolePanel(), this.gui.getEditorPanel(),
                SaveType.SAVE_AS, this.gui::setTitle, this.gui.getInterpreterManager(),
                new PreselectionFileChooser(f));
    }
    
    private CommandOpen buildCommandOpenDialog(CommandSave commandSave, OptionPane optionPane,
            FileChooser fileChooser) {
        return new CommandOpen(this.gui.getConsolePanel(), this.gui.getEditorPanel(),
                this.gui.getVisualisationPanel(), this.gui::setTitle, this.gui::switchClickableState,
                commandSave, this.gui.getInterpreterManager(), optionPane, fileChooser);
    }
    
    private CommandOpen buildCommandOpenDirectly(String path, CommandSave commandSave, OptionPane optionPane) {
        return new CommandOpen(path, this.gui.getConsolePanel(), this.gui.getEditorPanel(),
                this.gui.getVisualisationPanel(), this.gui::setTitle, this.gui::switchClickableState,
                commandSave, this.gui.getInterpreterManager(), optionPane);
    }
}