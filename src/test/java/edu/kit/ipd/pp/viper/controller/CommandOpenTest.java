package edu.kit.ipd.pp.viper.controller;

import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.File;

import org.junit.Before;
import org.junit.Test;

import edu.kit.ipd.pp.viper.view.ConsolePanel;
import edu.kit.ipd.pp.viper.view.EditorPanel;
import edu.kit.ipd.pp.viper.view.MainWindow;
import edu.kit.ipd.pp.viper.view.VisualisationPanel;

public class CommandOpenTest {
    private MainWindow gui;
    private ConsolePanel console;
    private EditorPanel editor;
    private VisualisationPanel visualisation;

    /**
     * Constructs the GUI.
     */
    @Before
    public void buildGUI() {
        this.gui = new MainWindow(false);
        this.gui.setVisible(false);
        this.editor = this.gui.getEditorPanel();
        this.console = this.gui.getConsolePanel();
        this.visualisation = this.gui.getVisualisationPanel();
    }

    /**
     * Tests the reading routine.
     */
    @Test
    public void testReading() {
        CommandOpen c = new CommandOpen(this.console, this.editor, this.visualisation, this.gui::switchClickableState);
        this.console.clearAll();
        final String text = c.getFileText(new File(this.getClass().getResource("/inputTestFile.txt").getPath()));

        assertTrue(text.trim().equals("02340520350130523050235"));
    }

    /**
     * Tests for correct error output.
     */
    @Test
    public void testErrorOutput() {
        CommandOpen c = new CommandOpen(this.console, this.editor, this.visualisation, this.gui::switchClickableState);
        this.console.clearAll();
        c.printOpenError(null, "/test/test.pl");

        final String expected = LanguageManager.getInstance().getString(LanguageKey.OPEN_FILE_ERROR) + ": "
                + "/test/test.pl";
        assertTrue(this.console.getOutputAreaText().trim().equals(expected));
    }

    /**
     * Tests whether the UI gets updated properly.
     */
    @Test
    public void testUIUpdate() {
        File file = new File("");
        new CommandOpen(this.console, this.editor, this.visualisation, this.gui::switchClickableState).updateUI(file);
        assertTrue(this.editor.hasFileReference());
        assertFalse(this.editor.hasChanged());
        assertFalse(this.visualisation.hasGraph());

        final String expected = LanguageManager.getInstance().getString(LanguageKey.OPEN_FILE_SUCCESS) + ": "
                + file.getAbsolutePath();
        assertTrue(this.console.getOutputAreaText().trim().equals(expected));
        file.delete();
    }
}
